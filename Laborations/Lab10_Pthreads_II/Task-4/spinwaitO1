	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 11, 0	sdk_version 11, 1
	.globl	_barrier                ## -- Begin function barrier
	.p2align	4, 0x90
_barrier:                               ## @barrier
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	_lock@GOTPCREL(%rip), %rdi
	callq	_pthread_mutex_lock
	movl	_state(%rip), %ebx
	movl	_waiting(%rip), %eax
	incl	%eax
	movl	%eax, _waiting(%rip)
	cmpl	$8, %eax
	jne	LBB0_2
## %bb.1:
	movl	$0, _waiting(%rip)
	movl	$1, %eax
	subl	%ebx, %eax
	movl	%eax, _state(%rip)
LBB0_2:
	movq	_lock@GOTPCREL(%rip), %rdi
	callq	_pthread_mutex_unlock
	cmpl	_state(%rip), %ebx
	jne	LBB0_4
	.p2align	4, 0x90
LBB0_3:                                 ## =>This Inner Loop Header: Depth=1
	jmp	LBB0_3
LBB0_4:
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_HelloWorld             ## -- Begin function HelloWorld
	.p2align	4, 0x90
_HelloWorld:                            ## @HelloWorld
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	leaq	L_.str(%rip), %rdi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	callq	_printf
	callq	_barrier
	leaq	L_.str.1(%rip), %rdi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	callq	_printf
	xorl	%eax, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_main                   ## -- Begin function main
	.p2align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	_lock@GOTPCREL(%rip), %rdi
	xorl	%ebx, %ebx
	xorl	%esi, %esi
	callq	_pthread_mutex_init
	leaq	-96(%rbp), %r14
	leaq	_HelloWorld(%rip), %r15
	.p2align	4, 0x90
LBB2_1:                                 ## =>This Inner Loop Header: Depth=1
	movq	%r14, %rdi
	xorl	%esi, %esi
	movq	%r15, %rdx
	movq	%rbx, %rcx
	callq	_pthread_create
	incq	%rbx
	addq	$8, %r14
	cmpq	$8, %rbx
	jne	LBB2_1
## %bb.2:
	xorl	%ebx, %ebx
	.p2align	4, 0x90
LBB2_3:                                 ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp,%rbx,8), %rdi
	xorl	%esi, %esi
	callq	_pthread_join
	incq	%rbx
	cmpq	$8, %rbx
	jne	LBB2_3
## %bb.4:
	movq	_lock@GOTPCREL(%rip), %rdi
	callq	_pthread_mutex_destroy
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-32(%rbp), %rax
	jne	LBB2_6
## %bb.5:
	xorl	%eax, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB2_6:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_waiting                ## @waiting
.zerofill __DATA,__common,_waiting,4,2
	.globl	_state                  ## @state
.zerofill __DATA,__common,_state,4,2
	.comm	_lock,64,3              ## @lock
	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"Hello World! %ld\n"

L_.str.1:                               ## @.str.1
	.asciz	"Bye Bye World! %ld\n"

.subsections_via_symbols
